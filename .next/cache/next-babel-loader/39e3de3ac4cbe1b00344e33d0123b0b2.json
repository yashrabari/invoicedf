{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kamlesh\\\\OneDrive\\\\Desktop\\\\ravi\\\\invoicedf\\\\front-end\\\\components\\\\Table\\\\BasicTable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React, { useMemo } from 'react'\n// import { useTable } from 'react-table'\n// import MOCK_DATA from './MOCK_DATA.json'\n// import { COLUMNS } from './columns'\n// // import './table.css'\n// import styled from 'styled-components'\n// export const BasicTable = () => {\n//   const columns = useMemo(() => COLUMNS, [])\n//   const data = useMemo(() => MOCK_DATA, [])\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     footerGroups,\n//     rows,\n//     prepareRow\n//   } = useTable({\n//     columns,\n//     data\n//   })\n//   return (\n//     <>\n//       <table className='table'>\n//         <thead className='hover'>\n//           {headerGroups.map(headerGroup => (\n//             <tr className='tr'{...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th className='th'{...column.getHeaderProps()}>{column.render('Header')}</th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <scrollView horizo> \n//           <tbody  >\n//             {/* {rows.map(row => {\n//             prepareRow(row)\n//             return ( */}\n//             {/* <tr className='tr' {...row.getRowProps()}> */}\n//             {/* {row.cells.map(cell => { */}\n//             <tr className='tr'>\n//               <th></th>\n//               <th>\n//                 <input\n//                   // {changes}\n//                   // value={companyData ? companyData.gst_number : \"\"}\n//                   // className=\"form-control\"\n//                   // readOnly={true}\n//                   type=\"text\"\n//                   placeholder=\"Enter product name...\"\n//                 />\n//               </th>\n//               <th>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter product name...\"\n//                 />\n//               </th>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               {/* })} */}\n//             </tr>\n//             {/* ) */}\n//             {/* })} */}\n//           </tbody>\n//         </scrollView>\n//         {/* <tfoot >\n//           {footerGroups.map(footerGroup => (\n//             <tr {...footerGroup.getFooterGroupProps()}>\n//               {footerGroup.headers.map(column => (\n//                 <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tfoot> */}\n//       </table>\n//     </>\n//   )\n// }\n// export const Styles = styled.div`\n//   .table {\n//     border: 1px solid #ddd;\n//     .tr {\n//       :last-child {\n//         .td {\n//           border-bottom: 0;\n//         }\n//       }\n//     }\n//     .th,\n//     .td {\n//       padding: 5px;\n//       border-bottom: 1px solid #ddd;\n//       border-right: 1px solid #ddd;\n//       background-color: #fff;\n//       overflow: hidden;\n//       :last-child {\n//         border-right: 0;\n//       }\n//     }\n//     &.sticky {\n//       overflow: scroll;\n//       .header,\n//       .footer {\n//         position: sticky;\n//         z-index: 1;\n//         width: fit-content;\n//       }\n//       .header {\n//         top: 0;\n//         box-shadow: 0px 3px 3px #ccc;\n//       }\n//       .footer {\n//         bottom: 0;\n//         box-shadow: 0px -3px 3px #ccc;\n//       }\n//       .body {\n//         position: relative;\n//         z-index: 0;\n//       }\n//       [data-sticky-td] {\n//         position: sticky;\n//       }\n//       [data-sticky-last-left-td] {\n//         box-shadow: 2px 0px 3px #ccc;\n//       }\n//       [data-sticky-first-right-td] {\n//         box-shadow: -2px 0px 3px #ccc;\n//       }\n//     }\n//   }\n// `\nimport React, { useState, useMemo } from 'react'; // import Container from '@material-ui/core/Container';\n// import TextField from '@material-ui/core/TextField';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import RemoveIcon from '@material-ui/icons/Remove';\n// import AddIcon from '@material-ui/icons/Add';\n// import Icon from '@material-ui/core/Icon';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS } from './columns';\nimport { useTable } from 'react-table'; // import { makeStyles } from '@material-ui/core/styles';\n\nexport const BasicTable = () => {\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }); // const classes = useStyles()\n\n  const {\n    0: inputFields,\n    1: setInputFields\n  } = useState([{\n    id: uuidv4(),\n    firstName: '',\n    lastName: ''\n  }]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if (id === i.id) {\n        i[event.target.name] = event.target.value;\n      }\n\n      return i;\n    });\n    setInputFields(newInputFields);\n  };\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, {\n      id: uuidv4(),\n      firstName: '',\n      lastName: ''\n    }]);\n  };\n\n  const handleRemoveFields = id => {\n    const values = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"hover\",\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({\n          className: \"tr\"\n        }, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({\n            className: \"th\"\n          }, column.getHeaderProps()), {}, {\n            children: column.render('Header')\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({\n          className: \"tr\"\n        }, row.getRowProps()), {}, {\n          children: row.cells.map(cell => {\n            inputFields.map(inputField => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"firstName\",\n                label: \"First Name\",\n                variant: \"filled\",\n                value: inputField.firstName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"lastName\",\n                label: \"Last Name\",\n                variant: \"filled\",\n                value: inputField.lastName,\n                onChange: event => handleChangeInput(inputField.id, event)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                disabled: inputFields.length === 1,\n                onClick: () => handleRemoveFields(inputField.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleAddFields\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 23\n              }, this)]\n            }, inputField.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 21\n            }, this));\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        // className={classes.button}\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\" // endIcon={<Icon>send</Icon>}\n        ,\n        onClick: handleSubmit,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};","map":{"version":3,"sources":["C:/Users/Kamlesh/OneDrive/Desktop/ravi/invoicedf/front-end/components/Table/BasicTable.js"],"names":["React","useState","useMemo","v4","uuidv4","MOCK_DATA","COLUMNS","useTable","BasicTable","columns","data","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","inputFields","setInputFields","id","firstName","lastName","handleSubmit","e","preventDefault","console","log","handleChangeInput","event","newInputFields","map","i","target","name","value","handleAddFields","handleRemoveFields","values","splice","findIndex","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","inputField","length"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAE9B,QAAMC,OAAO,GAAGP,OAAO,CAAC,MAAMI,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMI,IAAI,GAAGR,OAAO,CAAC,MAAMG,SAAP,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","sourcesContent":["// import React, { useMemo } from 'react'\n// import { useTable } from 'react-table'\n// import MOCK_DATA from './MOCK_DATA.json'\n// import { COLUMNS } from './columns'\n// // import './table.css'\n// import styled from 'styled-components'\n\n// export const BasicTable = () => {\n//   const columns = useMemo(() => COLUMNS, [])\n//   const data = useMemo(() => MOCK_DATA, [])\n\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     footerGroups,\n//     rows,\n//     prepareRow\n//   } = useTable({\n//     columns,\n//     data\n//   })\n\n//   return (\n//     <>\n//       <table className='table'>\n\n//         <thead className='hover'>\n//           {headerGroups.map(headerGroup => (\n//             <tr className='tr'{...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th className='th'{...column.getHeaderProps()}>{column.render('Header')}</th>\n//               ))}\n//             </tr>\n//           ))}\n//         </thead>\n//         <scrollView horizo> \n//           <tbody  >\n//             {/* {rows.map(row => {\n//             prepareRow(row)\n//             return ( */}\n//             {/* <tr className='tr' {...row.getRowProps()}> */}\n//             {/* {row.cells.map(cell => { */}\n//             <tr className='tr'>\n//               <th></th>\n//               <th>\n//                 <input\n//                   // {changes}\n//                   // value={companyData ? companyData.gst_number : \"\"}\n//                   // className=\"form-control\"\n//                   // readOnly={true}\n//                   type=\"text\"\n//                   placeholder=\"Enter product name...\"\n//                 />\n//               </th>\n//               <th>\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter product name...\"\n//                 />\n//               </th>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               <td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td><td className='td'>\n//                 <input\n//                   type=\"number\"\n//                 />\n//               </td>\n//               {/* })} */}\n//             </tr>\n//             {/* ) */}\n//             {/* })} */}\n//           </tbody>\n//         </scrollView>\n//         {/* <tfoot >\n//           {footerGroups.map(footerGroup => (\n//             <tr {...footerGroup.getFooterGroupProps()}>\n//               {footerGroup.headers.map(column => (\n//                 <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tfoot> */}\n//       </table>\n//     </>\n//   )\n// }\n\n// export const Styles = styled.div`\n//   .table {\n//     border: 1px solid #ddd;\n\n//     .tr {\n//       :last-child {\n//         .td {\n//           border-bottom: 0;\n//         }\n//       }\n//     }\n\n//     .th,\n//     .td {\n//       padding: 5px;\n//       border-bottom: 1px solid #ddd;\n//       border-right: 1px solid #ddd;\n//       background-color: #fff;\n//       overflow: hidden;\n\n//       :last-child {\n//         border-right: 0;\n//       }\n//     }\n\n//     &.sticky {\n//       overflow: scroll;\n//       .header,\n//       .footer {\n//         position: sticky;\n//         z-index: 1;\n//         width: fit-content;\n//       }\n\n//       .header {\n//         top: 0;\n//         box-shadow: 0px 3px 3px #ccc;\n//       }\n\n//       .footer {\n//         bottom: 0;\n//         box-shadow: 0px -3px 3px #ccc;\n//       }\n\n//       .body {\n//         position: relative;\n//         z-index: 0;\n//       }\n\n//       [data-sticky-td] {\n//         position: sticky;\n//       }\n\n//       [data-sticky-last-left-td] {\n//         box-shadow: 2px 0px 3px #ccc;\n//       }\n\n//       [data-sticky-first-right-td] {\n//         box-shadow: -2px 0px 3px #ccc;\n//       }\n//     }\n//   }\n// `\nimport React, { useState, useMemo } from 'react';\n// import Container from '@material-ui/core/Container';\n// import TextField from '@material-ui/core/TextField';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import RemoveIcon from '@material-ui/icons/Remove';\n// import AddIcon from '@material-ui/icons/Add';\n// import Icon from '@material-ui/core/Icon';\nimport { v4 as uuidv4 } from 'uuid';\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS } from './columns'\n\nimport { useTable } from 'react-table'\n// import { makeStyles } from '@material-ui/core/styles';\n\n\n\nexport const BasicTable = () => {\n\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => MOCK_DATA, [])\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  })\n  // const classes = useStyles()\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), firstName: '', lastName: '' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", inputFields);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newInputFields = inputFields.map(i => {\n      if (id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n\n    setInputFields(newInputFields);\n  }\n\n  const handleAddFields = () => {\n    setInputFields([...inputFields, { id: uuidv4(), firstName: '', lastName: '' }])\n  }\n\n  const handleRemoveFields = id => {\n    const values = [...inputFields];\n    values.splice(values.findIndex(value => value.id === id), 1);\n    setInputFields(values);\n  }\n\n  return (\n    <>\n      <table className='table' onSubmit={handleSubmit}>\n\n        <thead className='hover'>\n          {headerGroups.map(headerGroup => (\n            <tr className='tr'{...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th className='th'{...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr className='tr' {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                \n                \n                  inputFields.map(inputField => (\n                    <div key={inputField.id}>\n                      <input\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        variant=\"filled\"\n                        value={inputField.firstName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        variant=\"filled\"\n                        value={inputField.lastName}\n                        onChange={event => handleChangeInput(inputField.id, event)}\n                      />\n                      <button disabled={inputFields.length === 1} onClick={() => handleRemoveFields(inputField.id)}>\n                        {/* <RemoveIcon /> */}\n                      </button>\n                      <button\n                        onClick={handleAddFields}\n                      >\n                        {/* <AddIcon /> */}\n                      </button>\n                    </div>\n                  ))\n                \n                \n              })}\n              </tr>\n          )})}\n                <button\n                  // className={classes.button}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  // endIcon={<Icon>send</Icon>}\n                  onClick={handleSubmit}\n                >Send</button>\n      </table>\n    </>\n      );\n}\n"]},"metadata":{},"sourceType":"module"}