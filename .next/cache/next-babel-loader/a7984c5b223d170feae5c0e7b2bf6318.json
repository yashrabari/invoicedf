{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport decode from 'jwt-decode';\nconst instance = axios.create({\n  baseURL: \"http://127.0.0.1:1338\"\n});\ninstance.interceptors.request.use(async config => {\n  const accessToken = 'Bearer ' + localStorage.getItem('accessToken');\n\n  if (localStorage.getItem('accessToken')) {\n    config.headers.Authorization = accessToken ? accessToken : '';\n  }\n\n  return config;\n});\nexport const login = async (email, password) => await axios.post('http://127.0.0.1:1338/auth/local', {\n  identifier: email,\n  password\n});\nexport const getProducts = async () => {\n  return await instance.get('products');\n};\nexport const getCustomers = async () => {\n  return await instance.get('customers?company_type=customer&company_type=customer_vendor');\n};\nexport const getVendors = async () => {\n  return await instance.get('customers?company_type=vendor&company_type=customer_vendor');\n};\nexport const postCustomers = async data => {\n  return await instance.post('customers', data);\n};\nexport const postReceipts = async data => {\n  return await instance.post('receipts', data);\n};\nexport const getReceipts = async query => {\n  return await instance.get('receipts?' + query);\n};","map":{"version":3,"sources":["C:/Users/Kamlesh/OneDrive/Desktop/ravi/invoicedf/front-end/networks/api.js"],"names":["axios","qs","decode","instance","create","baseURL","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","login","email","password","post","identifier","getProducts","get","getCustomers","getVendors","postCustomers","data","postReceipts","getReceipts","query"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAb,CAAjB;AAIAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,MAAOC,MAAP,IAAkB;AAChD,QAAMC,WAAW,GAAG,YAAYC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAhC;;AACA,MAAID,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAJ,EAAyC;AAErCH,IAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgCJ,WAAW,GAAGA,WAAH,GAAiB,EAA5D;AACH;;AACD,SAAOD,MAAP;AACH,CAPD;AASA,OAAO,MAAMM,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KACjB,MAAMjB,KAAK,CAACkB,IAAN,CAAW,kCAAX,EAA+C;AAAEC,EAAAA,UAAU,EAAEH,KAAd;AAAqBC,EAAAA;AAArB,CAA/C,CADH;AAGP,OAAO,MAAMG,WAAW,GAAG,YAAY;AACnC,SAAO,MAAMjB,QAAQ,CAACkB,GAAT,CAAa,UAAb,CAAb;AACH,CAFM;AAGP,OAAO,MAAMC,YAAY,GAAG,YAAY;AACpC,SAAO,MAAMnB,QAAQ,CAACkB,GAAT,CAAa,8DAAb,CAAb;AACH,CAFM;AAGP,OAAO,MAAME,UAAU,GAAG,YAAY;AAClC,SAAO,MAAMpB,QAAQ,CAACkB,GAAT,CAAa,4DAAb,CAAb;AACH,CAFM;AAGP,OAAO,MAAMG,aAAa,GAAG,MAAOC,IAAP,IAAgB;AACzC,SAAO,MAAMtB,QAAQ,CAACe,IAAT,CAAc,WAAd,EAA2BO,IAA3B,CAAb;AACH,CAFM;AAGP,OAAO,MAAMC,YAAY,GAAG,MAAOD,IAAP,IAAgB;AACxC,SAAO,MAAMtB,QAAQ,CAACe,IAAT,CAAc,UAAd,EAA0BO,IAA1B,CAAb;AACH,CAFM;AAGP,OAAO,MAAME,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACxC,SAAO,MAAMzB,QAAQ,CAACkB,GAAT,CAAa,cAAcO,KAA3B,CAAb;AACH,CAFM","sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs'\r\nimport decode from 'jwt-decode'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://127.0.0.1:1338\",\r\n});\r\n\r\ninstance.interceptors.request.use(async (config) => {\r\n    const accessToken = 'Bearer ' + localStorage.getItem('accessToken');\r\n    if (localStorage.getItem('accessToken')) {\r\n\r\n        config.headers.Authorization = (accessToken ? accessToken : '');\r\n    }\r\n    return config;\r\n});\r\n\r\nexport const login = async (email, password) => (\r\n    await axios.post('http://127.0.0.1:1338/auth/local', { identifier: email, password })\r\n);\r\nexport const getProducts = async () => {\r\n    return await instance.get('products')\r\n}\r\nexport const getCustomers = async () => {\r\n    return await instance.get('customers?company_type=customer&company_type=customer_vendor')\r\n}\r\nexport const getVendors = async () => {\r\n    return await instance.get('customers?company_type=vendor&company_type=customer_vendor')\r\n}\r\nexport const postCustomers = async (data) => {\r\n    return await instance.post('customers', data)\r\n}\r\nexport const postReceipts = async (data) => {\r\n    return await instance.post('receipts', data)\r\n}\r\nexport const getReceipts = async (query) => {\r\n    return await instance.get('receipts?' + query)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}