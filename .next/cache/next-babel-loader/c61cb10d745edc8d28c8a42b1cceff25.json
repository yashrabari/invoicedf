{"ast":null,"code":"import _defineProperty from \"C:/Users/Kamlesh/OneDrive/Desktop/ravi/invoicedf/front-end/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Kamlesh\\\\OneDrive\\\\Desktop\\\\ravi\\\\invoicedf\\\\front-end\\\\components\\\\Table\\\\BasicTable.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useMemo } from 'react'; // import { useTable } from 'react-table'\n\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS } from './columns'; // import './table.css'\n\nexport var BasicTable = function BasicTable() {\n  _s();\n\n  var columns = useMemo(function () {\n    return COLUMNS;\n  }, []);\n  var data = useMemo(function () {\n    return MOCK_DATA;\n  }, []); // const {\n  //   getTableProps,\n  //   getTableBodyProps,\n  //   headerGroups,\n  //   footerGroups,\n  //   rows,\n  //   prepareRow\n  // } = useTable({\n  //   columns,\n  //   data\n  // })\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows.map(function (row) {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(function (cell) {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                children: cell.render('Cell')\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 26\n              }, _this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"tfoot\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(BasicTable, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c = BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"sources":["C:/Users/Kamlesh/OneDrive/Desktop/ravi/invoicedf/front-end/components/Table/BasicTable.js"],"names":["React","useMemo","MOCK_DATA","COLUMNS","BasicTable","columns","data","rows","map","row","prepareRow","getRowProps","cells","cell","getCellProps","render"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CACA;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAC9B,MAAMC,OAAO,GAAGJ,OAAO,CAAC;AAAA,WAAME,OAAN;AAAA,GAAD,EAAgB,EAAhB,CAAvB;AACA,MAAMG,IAAI,GAAGL,OAAO,CAAC;AAAA,WAAMC,SAAN;AAAA,GAAD,EAAkB,EAAlB,CAApB,CAF8B,CAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,eADF,eAUE;AAAA,kBACGK,IAAI,CAACC,GAAL,CAAS,UAAAC,GAAG,EAAI;AACfC,UAAAA,UAAU,CAACD,GAAD,CAAV;AACA,8BACE,8CAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,sBACGF,GAAG,CAACG,KAAJ,CAAUJ,GAAV,CAAc,UAAAK,IAAI,EAAI;AACrB,kCAAO,8CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BAA8BD,IAAI,CAACE,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD,aAFA;AADH;AAAA;AAAA;AAAA;AAAA,mBADF;AAOD,SATA;AADH;AAAA;AAAA;AAAA;AAAA,eAVF,eAsBE;AAAA;AAAA;AAAA;AAAA,eAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoCD,CApDM;;GAAMX,U;;KAAAA,U","sourcesContent":["import React, { useMemo } from 'react'\n// import { useTable } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS } from './columns'\n// import './table.css'\n\nexport const BasicTable = () => {\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => MOCK_DATA, [])\n\n  // const {\n  //   getTableProps,\n  //   getTableBodyProps,\n  //   headerGroups,\n  //   footerGroups,\n  //   rows,\n  //   prepareRow\n  // } = useTable({\n  //   columns,\n  //   data\n  // })\n\n  return (\n    <>\n      <table >\n        <thead>\n          {/* {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))} */}\n        </thead>\n        <tbody >\n          {rows.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n        <tfoot>\n          {/* {footerGroups.map(footerGroup => (\n            <tr {...footerGroup.getFooterGroupProps()}>\n              {footerGroup.headers.map(column => (\n                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n              ))}\n            </tr>\n          ))} */}\n        </tfoot>\n      </table>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}